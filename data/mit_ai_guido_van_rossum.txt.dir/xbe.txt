guido van:
thought can be formalized. I think that continued in the 20th century with, with uh with the Russell and with uh with gels uh and Completeness theorem. This debate of what, what, what are the limits of the things that could be formalized? That's where the touring machine came along. And this exciting idea, I mean, underlying a lot of computing that you can do quite a lot with a computer, you can, you can encode a lot of the stuff we're talking about in terms of recognizing faces and so on theoretically in in an algorithm that can then run on a computer. And in that context, I'd like to ask programming in a philosophical way. So what does it mean to program a computer? So you said you write a Python program or compiled a C++ program that compiles toy byte code, it's forming layers, you, you're programming a layer of abstraction that's higher. How do you see programming in that context? Can it keep getting higher and higher levels of abstraction? I think at some, at some point, the higher level of levels of obs