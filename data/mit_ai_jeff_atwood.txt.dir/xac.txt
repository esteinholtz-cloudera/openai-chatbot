jeff atwood:
e shuffling problem. Like the naive shuffle that most programmers write has a huge flaw and there's a lot of articles online about this because it can be really bad if you're like a casino and you have an unsophisticated programmer writing your shuffle algorithm. There's surprising ways to get this wrong. But the neat thing is the way to figure that out is just to run your shuffle a bunch of times and see like how many orientations of cards you get. You should get an equal distribution of all the cards. And with the naive method of shuffling, if you just look at the data, if you just brute force and say, OK, I don't know what's gonna happen. Um, you just write, write a program that does it a billion times and then see what the buckets look like of the data. And the money hall problem is another example of that where you have three doors and somebody gives you information about another door. So the correct answer is you should always switch in the money hall problem, which is not intuitive and it freaks people